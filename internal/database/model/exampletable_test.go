// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExampletables(t *testing.T) {
	t.Parallel()

	query := Exampletables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExampletablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExampletablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Exampletables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExampletablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExampletableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExampletablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExampletableExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Exampletable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExampletableExists to return true, but got false.")
	}
}

func testExampletablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	exampletableFound, err := FindExampletable(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if exampletableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExampletablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Exampletables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExampletablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Exampletables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExampletablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exampletableOne := &Exampletable{}
	exampletableTwo := &Exampletable{}
	if err = randomize.Struct(seed, exampletableOne, exampletableDBTypes, false, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}
	if err = randomize.Struct(seed, exampletableTwo, exampletableDBTypes, false, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exampletableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exampletableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Exampletables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExampletablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exampletableOne := &Exampletable{}
	exampletableTwo := &Exampletable{}
	if err = randomize.Struct(seed, exampletableOne, exampletableDBTypes, false, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}
	if err = randomize.Struct(seed, exampletableTwo, exampletableDBTypes, false, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exampletableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exampletableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func exampletableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func exampletableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Exampletable) error {
	*o = Exampletable{}
	return nil
}

func testExampletablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Exampletable{}
	o := &Exampletable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, exampletableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Exampletable object: %s", err)
	}

	AddExampletableHook(boil.BeforeInsertHook, exampletableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	exampletableBeforeInsertHooks = []ExampletableHook{}

	AddExampletableHook(boil.AfterInsertHook, exampletableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	exampletableAfterInsertHooks = []ExampletableHook{}

	AddExampletableHook(boil.AfterSelectHook, exampletableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	exampletableAfterSelectHooks = []ExampletableHook{}

	AddExampletableHook(boil.BeforeUpdateHook, exampletableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	exampletableBeforeUpdateHooks = []ExampletableHook{}

	AddExampletableHook(boil.AfterUpdateHook, exampletableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	exampletableAfterUpdateHooks = []ExampletableHook{}

	AddExampletableHook(boil.BeforeDeleteHook, exampletableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	exampletableBeforeDeleteHooks = []ExampletableHook{}

	AddExampletableHook(boil.AfterDeleteHook, exampletableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	exampletableAfterDeleteHooks = []ExampletableHook{}

	AddExampletableHook(boil.BeforeUpsertHook, exampletableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	exampletableBeforeUpsertHooks = []ExampletableHook{}

	AddExampletableHook(boil.AfterUpsertHook, exampletableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	exampletableAfterUpsertHooks = []ExampletableHook{}
}

func testExampletablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExampletablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(exampletableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExampletablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExampletablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExampletableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExampletablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Exampletables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exampletableDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `CreatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testExampletablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(exampletablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(exampletableAllColumns) == len(exampletablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExampletablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exampletableAllColumns) == len(exampletablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Exampletable{}
	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exampletableDBTypes, true, exampletablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exampletableAllColumns, exampletablePrimaryKeyColumns) {
		fields = exampletableAllColumns
	} else {
		fields = strmangle.SetComplement(
			exampletableAllColumns,
			exampletablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExampletableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExampletablesUpsert(t *testing.T) {
	t.Parallel()

	if len(exampletableAllColumns) == len(exampletablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLExampletableUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Exampletable{}
	if err = randomize.Struct(seed, &o, exampletableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Exampletable: %s", err)
	}

	count, err := Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, exampletableDBTypes, false, exampletablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exampletable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Exampletable: %s", err)
	}

	count, err = Exampletables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
