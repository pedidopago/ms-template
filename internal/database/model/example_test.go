// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExamples(t *testing.T) {
	t.Parallel()

	query := Examples()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExamplesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamplesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Examples().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamplesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExampleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamplesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExampleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Example exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExampleExists to return true, but got false.")
	}
}

func testExamplesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	exampleFound, err := FindExample(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if exampleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExamplesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Examples().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExamplesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Examples().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExamplesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exampleOne := &Example{}
	exampleTwo := &Example{}
	if err = randomize.Struct(seed, exampleOne, exampleDBTypes, false, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}
	if err = randomize.Struct(seed, exampleTwo, exampleDBTypes, false, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exampleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exampleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Examples().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExamplesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exampleOne := &Example{}
	exampleTwo := &Example{}
	if err = randomize.Struct(seed, exampleOne, exampleDBTypes, false, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}
	if err = randomize.Struct(seed, exampleTwo, exampleDBTypes, false, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exampleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exampleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func exampleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func exampleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Example) error {
	*o = Example{}
	return nil
}

func testExamplesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Example{}
	o := &Example{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, exampleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Example object: %s", err)
	}

	AddExampleHook(boil.BeforeInsertHook, exampleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	exampleBeforeInsertHooks = []ExampleHook{}

	AddExampleHook(boil.AfterInsertHook, exampleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	exampleAfterInsertHooks = []ExampleHook{}

	AddExampleHook(boil.AfterSelectHook, exampleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	exampleAfterSelectHooks = []ExampleHook{}

	AddExampleHook(boil.BeforeUpdateHook, exampleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	exampleBeforeUpdateHooks = []ExampleHook{}

	AddExampleHook(boil.AfterUpdateHook, exampleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	exampleAfterUpdateHooks = []ExampleHook{}

	AddExampleHook(boil.BeforeDeleteHook, exampleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	exampleBeforeDeleteHooks = []ExampleHook{}

	AddExampleHook(boil.AfterDeleteHook, exampleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	exampleAfterDeleteHooks = []ExampleHook{}

	AddExampleHook(boil.BeforeUpsertHook, exampleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	exampleBeforeUpsertHooks = []ExampleHook{}

	AddExampleHook(boil.AfterUpsertHook, exampleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	exampleAfterUpsertHooks = []ExampleHook{}
}

func testExamplesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExamplesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(exampleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExamplesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExamplesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExampleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExamplesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Examples().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exampleDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `CreatedAt`: `datetime`}
	_              = bytes.MinRead
)

func testExamplesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(examplePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(exampleAllColumns) == len(examplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exampleDBTypes, true, examplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExamplesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exampleAllColumns) == len(examplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Example{}
	if err = randomize.Struct(seed, o, exampleDBTypes, true, exampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exampleDBTypes, true, examplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exampleAllColumns, examplePrimaryKeyColumns) {
		fields = exampleAllColumns
	} else {
		fields = strmangle.SetComplement(
			exampleAllColumns,
			examplePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExampleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExamplesUpsert(t *testing.T) {
	t.Parallel()

	if len(exampleAllColumns) == len(examplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLExampleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Example{}
	if err = randomize.Struct(seed, &o, exampleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Example: %s", err)
	}

	count, err := Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, exampleDBTypes, false, examplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Example struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Example: %s", err)
	}

	count, err = Examples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
